dnl ################################################################################
dnl # This program is free software; you can redistribute it and/or modify it      #
dnl # under the terms of the GNU General Public License (either version 2 or       #
dnl # version 3) as published by the Free Software Foundation.                     #
dnl #                                                                              #
dnl # This program is distributed in the hope that it will be useful,              #
dnl # but WITHOUT ANY WARRANTY; without even the implied warranty of               #
dnl # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
dnl # GNU General Public License for more details.                                 #
dnl #                                                                              #
dnl # You should have received a copy of the GNU General Public License            #
dnl # along with this program; if not, write to the Free Software                  #
dnl # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                    #
dnl #                                                                              #
dnl # For more information on the GPL, please go to:                               #
dnl # http://www.gnu.org/copyleft/gpl.html                                         #
dnl #                                                                              #
dnl #                                                                              #
dnl # Programm Erstellung:                                                         #
dnl #   Copyright (C) 2009-2010 - Michael Schultz <ethersex@keyb.de>               #
dnl #                                                                              #
dnl ################################################################################

/* Fuses:       Extended        0xFF
 *              High            0x9A
 *              Low             0xFF
 *http://frank.circleofcurrent.com/fusecalc/fusecalc.php?chip=atmega169&LOW=FF&HIGH=9A&EXTENDED=FF&LOCKBIT=FF
 */

#include <hardware/lcd/hr20.h>
#include <hardware/adc/hr20-temp.h>
#include <hardware/adc/hr20-batt.h>


/* jump to bootloader = 512 words @atmega169 */
void (*jump_boot)(void) = (void *)0x1E00 ;

static uint8_t DisplayModeOld ;
static uint8_t RXLine ;

static uint16_t Message = 0 ;
static uint16_t RingCount = 0 ;
static uint16_t MotorPosAbsolutely = 300 ;
static uint16_t MotorPosWant = 2000 ;
static uint16_t MotorRingCountOld = 0 ;
static uint16_t MotorInitPos1 ;
static uint16_t MotorInitPos2 ;
static uint16_t MotorInitPos3 ;
static uint16_t MotorInitPos4 ;


static uint8_t Key1PressTime ;		// Taste, Links,  Auto/Manu
static uint8_t Key2PressTime ;		// Taste, Mitte,  Prog
static uint8_t Key3PressTime ;		// Taste, Rechts, Temp
static uint8_t rad_a ;
static uint8_t rad_b ;
static uint8_t Counter1 = 0 ;

static uint16_t Counter2 = 0 ;

static uint8_t rotate = 5 ;

static uint8_t DisplayMode = 1 ;		//	Anzeige Modus
static uint8_t DisplayChar0 ;
static uint8_t DisplayChar1 ;
static uint8_t DisplayChar2 ;
static uint8_t DisplayChar3 ;
static uint16_t BattSpannung ;
static uint16_t TempGrad ;

static uint8_t MotorMode = 0 ;
#define MotRun		0
#define MotOpen		1
#define MotClose	2
#define MotInit		3
#define MotRun1		4
#define MotRun2		5
#define MotRun3		6
#define MotRun4		7

//########################################################################################################################
void motor_open() {
	PORTG &= ~_BV(PG3);		//	PORTG(PG3) = 0		Motor Vorwärts ( Ventil Auf )
	PORTG |=  _BV(PG4);		//	PORTG(PG4) = 1		Motor Vorwärts ( Ventil Auf )
	MotorMode |= (1<<MotRun) | (1<<MotOpen);
	MotorMode &= ~_BV(MotClose);	// MotClose = 0
	MotorRingCountOld = RingCount ;
}
void motor_close() {
	PORTG |=  _BV(PG3);		//	PORTG(PG3) = 1		Motor Rückwärts ( Ventil Zu )
	PORTG &= ~_BV(PG4);		//	PORTG(PG4) = 0		Motor Rückwärts ( Ventil Zu )
	MotorMode |= (1<<MotRun) | (1<<MotClose);
	MotorMode &= ~_BV(MotOpen);	// MotOpen = 0
	MotorRingCountOld = RingCount ;
}
void motor_off() {
	PORTG &= ~_BV(PG3);		//	PORTG(PG3) = 0		Motor Aus
	PORTG &= ~_BV(PG4);		//	PORTG(PG4) = 0		Motor Aus
	MotorMode &= ~_BV(MotRun);	//	MotRun = 0
	if ( MotorMode & ( 1 << MotInit ) ) {		// MotInit = 1
		if ( MotorMode & ( 1 << MotOpen ) ) {		// MotOpen = 1
			if ( MotorMode & ( 1 << MotRun1 ) ) {		// MotRun1 = 1
				// Init Run, 1. step is finish, Full Open is reached
				MotorPosAbsolutely = 1000;
				MotorMode &= ~_BV(MotRun1);		// MotRun1 = 0
				MotorMode |= (1<<MotRun2);		// MotRun2 = 1
				motor_close();
			} else if ( MotorMode & ( 1 << MotRun3 ) ) {	// MotRun3 = 1
				// Init Run, 3. step is finish, Another Full Open is reached
				MotorInitPos2 = MotorPosAbsolutely;
				MotorPosAbsolutely = 1000;
				MotorMode &= ~_BV(MotRun3);		// MotRun3 = 0
				MotorMode |= (1<<MotRun4);		// MotRun4 = 1
				motor_close();
			} else {
				// Init Run, 5. step is finish, The Last Full Open is reached
				MotorInitPos4 = MotorPosAbsolutely;
				MotorMode &= ~_BV(MotInit);		// MotInit = 0
				MotorMode &= ~_BV(MotOpen);		// MotOpen = 0
				DisplayMode=1;
			}
		} else if ( MotorMode & ( 1 << MotClose ) ) {		// MotClose = 1
			if ( MotorMode & ( 1 << MotRun2 ) ) {
				// Init Run, 2. step is finish, Full Close is reached
				MotorInitPos1 = MotorPosAbsolutely;
				MotorPosAbsolutely = 0;
				MotorMode &= ~_BV(MotRun2);		// MotRun2 = 0
				MotorMode |= (1<<MotRun3);		// MotRun3 = 1
				motor_open();
			} else if ( MotorMode & ( 1 << MotRun4 ) ) {	// MotRun4 = 1
				// Init Run, 4. step is finish, Another Full Close is reached
				MotorInitPos3 = MotorPosAbsolutely;
				MotorPosAbsolutely = 0;
				MotorMode &= ~_BV(MotRun4);		// MotRun4 = 0
				motor_open();
			}
		}
	}
}
void motor_hang_check() {
	if ( RingCount >= ( MotorRingCountOld + 7 ) ) {
		motor_off();
	} else {
		if ( MotorMode & ( 1 << MotInit ) ) {} else {
			if ( MotorMode & ( 1 << MotOpen  ) && MotorPosAbsolutely >= MotorPosWant ) { motor_off(); }
			if ( MotorMode & ( 1 << MotClose ) && MotorPosAbsolutely <= MotorPosWant ) { motor_off(); }
		}
	}
}
//########################################################################################################################
#include "protocols/ecmd/ecmd-base.h"
int16_t parse_cmd_motor_want(char *cmd, char *output, uint16_t len) {
	while (*cmd == ' ')
	cmd++;
	if (*cmd == '\0') {
		return ECMD_FINAL(snprintf_P(output, len, PSTR("%d"), MotorPosWant));
	} else {
		uint16_t NewMotorPosWant = strtoul(cmd, NULL, 10);
		if (!NewMotorPosWant)
			return ECMD_ERR_PARSE_ERROR;
		MotorPosWant=NewMotorPosWant;
		return ECMD_FINAL_OK;
	}
}
int16_t parse_cmd_motor_pos(char *cmd, char *output, uint16_t len) {
	return ECMD_FINAL(snprintf_P(output, len, PSTR("%d"), MotorPosAbsolutely));
}
int16_t parse_cmd_motor_open(char *cmd, char *output, uint16_t len) {
	motor_open();
	return ECMD_FINAL_OK;
}
int16_t parse_cmd_motor_close(char *cmd, char *output, uint16_t len) {
	motor_close();
	return ECMD_FINAL_OK;
}
//########################################################################################################################
CONTROL_START

	THREAD(DisplayOut)
		BattSpannung=hr20_batt_get ();
		TempGrad=hr20_temp_get ();

		switch(DisplayMode) {
		case 1:	// Anzeige Datum und uhrzeit
			DisplayChar3=((CLOCK_HOUR / 10) % 10);
			DisplayChar2=(CLOCK_HOUR % 10);
			DisplayChar1=((CLOCK_MIN / 10) % 10);
			DisplayChar0=(CLOCK_MIN % 10);
			break;
		case 2:	// Anzeige Batterie Spannung
//			DisplayChar3=HR20_LCD_CHAR_SPACE;
			DisplayChar3=HR20_LCD_CHAR_U;
			DisplayChar2=((BattSpannung / 100) % 10);
			DisplayChar1=((BattSpannung / 10)  % 10);
			DisplayChar0=( BattSpannung        % 10);
			LCD_SEG_CLEAR (LCD_SEG_COL1);
			LCD_SEG_SET   (LCD_SEG_COL2);
			break;
		case 3:	// Anzeige Temperatur
			DisplayChar3=((TempGrad / 100) % 10);
			DisplayChar2=((TempGrad / 10)  % 10);
			DisplayChar1=( TempGrad        % 10);
			DisplayChar0=HR20_LCD_CHAR_DEG;
			LCD_SEG_CLEAR (LCD_SEG_COL1);
			LCD_SEG_SET   (LCD_SEG_COL2);
			break;
//		case 4:	// Counter2 wert anzeige
//			DisplayChar3=HR20_LCD_CHAR_SPACE;
//			DisplayChar3=((Counter2 / 1000) % 10);
//			DisplayChar2=((Counter2 / 100) % 10);
//			DisplayChar1=((Counter2 / 10) % 10);
//			DisplayChar0=(Counter2 % 10);
//			LCD_SEG_SET   (LCD_SEG_COL1);
//			LCD_SEG_SET   (LCD_SEG_COL2);
		}
		if ( DisplayMode >= 1 ) {
			if ( DisplayMode <= 9 ) {
				LCD_SEG_TOGGLE (LCD_SEG_COL1);
				LCD_SEG_TOGGLE (LCD_SEG_COL2);
			}
			hr20_lcd_putchar(3, DisplayChar3);
			hr20_lcd_putchar(2, DisplayChar2);
			hr20_lcd_putchar(1, DisplayChar1);
			hr20_lcd_putchar(0, DisplayChar0);
		}
		WAIT(1);
	THREAD_END(DisplayOut)

	ON STARTUP DO

		// vorbereitung für tasten und wahlrad
		DDRB = 0;
		PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB3) | (1<<PB2) | (1<<PB1) | (1<<PB0);

		// test --> DDRE &= ~(_BV(PE4) | _BV(PE3));

		// Lichtschranke vorbereiten
		DDRE   &= ~_BV(PE4);		// DDRE(PE4) = 0	Eingang Schalten für lichschranken ausgang
		PORTE  &= ~_BV(PE4);		// PORTE(PE4) = 0	Pullup deaktivieren für lichschranken ausgang
		DDRE   |=  _BV(PE2);		// DDRE(PE2) = 1	Lichtschranke pinne, vorbereiten
		DDRE   |=  _BV(PE3);		// DDRE(PE3) = 1	Lichtschranke pinne, vorbereiten
		PORTE  |=  _BV(PE2);		// PORTE(PE2) = 1	Lichtschranke aktivieren ( port output and high )
		PORTE  |=  _BV(PE3);		// PORTE(PE3) = 1	Lichtschranke aktivieren ( port output and high )
		PCMSK0 |=  _BV(PCINT4);		// PCMSK0(PCINT4) = 1	interrupt für den pin aktivieren
		EIMSK  |=  _BV(PCIE0);		// EIMSK(PCIE0) = 1	interrupt generell f.r pereferie 0 aktivieren

		// Interrupt für Tasten und Wahlrad
		PCMSK1 |=  _BV(PCINT12);	// Interrupt aktivierung für wahlrad
		PCMSK1 |=  _BV(PCINT13);	// Interrupt aktivierung für wahlrad
		EIMSK  |=  _BV(PCIE1);		//	EIMSK(PCIE1) = 1	Pin Change Interrupt Enable 1

		DDRG |= (1<<PG3) | (1<<PG4);
//		DDRE   = (1<<PE3)   | (1<<PE2);
//		PORTE  = (1<<PE3)   | (1<<PE2);
//		PCMSK0 = (1<<PCINT4);
//		PCMSK1 = (1<<PB4)   | (1<<PB5);
//		EIMSK  = (1<<PCIE0) | (1<<PCIE1);

		RXLine = 1 ;

		TCP_CONNECT(10.2.0.33, 95, tcp_syslog_sending);

//		clock_set_time(1703976120);		//	date --date="2023-12-30 23:42:00" +%s

		THREAD_START(DisplayOut)
	END

	RingCount ++ ;
	if ( RingCount >= 32768 ) { RingCount = 0 ; }

	TCP_HANDLER_PERSIST(tcp_syslog_sending)
	for (;;) {
		if ( MotorMode == 0 ) {
			TCP_SEND("%02d:%02d:%02d Message=%d BattSpannung=%d TempGrad=%d MotorInitPos=%d/%d/%d/%d %d %d\n", CLOCK_HOUR(), CLOCK_MIN(), CLOCK_SEC(), Message, BattSpannung, TempGrad, MotorInitPos1, MotorInitPos2, MotorInitPos3, MotorInitPos4, MotorPosAbsolutely, MotorMode);
		}
			Message ++;
			if ( Message >= 32768 ) { Message = 0 ; }
		WAIT(10);
	}
	TCP_HANDLER_END(tcp_syslog_sending);
	//########################################
	//########## key press analysis ##########
	//########################################
	if (!(PINB & 0b00000001)) {
		Key1PressTime ++ ;
		if ( Key1PressTime >= 251 ) { Key1PressTime = 250 ; }
	} else {
		Key1PressTime=0 ;
	}
	if (!(PINB & 0b00000010)) {
		Key2PressTime ++ ;
		if ( Key2PressTime >= 251 ) { Key2PressTime = 250 ; }
	} else {
		Key2PressTime=0 ;
	}
	if (!(PINB & 0b00000100)) {
		Key3PressTime ++ ;
		if ( Key3PressTime >= 251 ) { Key3PressTime = 250 ; }
	} else {
		Key3PressTime=0 ;
	}
	//########################################

	if ( Key1PressTime >= 100 && Key3PressTime >= 100 ) {
		DisplayChar3=HR20_LCD_CHAR_A;
		DisplayChar2=HR20_LCD_CHAR_D;
		DisplayChar1=HR20_LCD_CHAR_A;
		DisplayChar0=HR20_LCD_CHAR_P;
		LCD_SEG_CLEAR (LCD_SEG_COL1);
		LCD_SEG_CLEAR (LCD_SEG_COL2);
		DisplayModeOld=DisplayMode;
		DisplayMode=10;
		MotorMode |= (1<<MotInit) | (1<<MotRun1);
		motor_open();
	}

	// Jump to Bootloader
	if ( Key1PressTime >= 250 && Key3PressTime >= 250 ) {
		jump_boot();
	}
	// motor_open
//	if ( Key1PressTime >= 10 ) {
//		motor_open();
//	}
	// motor_close
//	if ( Key3PressTime >= 10 ) {
//		motor_close();
//	}

	if ( Key2PressTime >= 10 ) {
		DisplayMode ++;
		if ( DisplayMode >= 4 ) { DisplayMode = 0 ; }
		Key2PressTime = 0;
	}


	if ( MotorMode >= 1 ) { motor_hang_check(); }
	//########################################
CONTROL_END
//########################################################################################################################
// Interrupt für dir motor Lichtschranke
ISR(PCINT0_vect) {
//	MotorPosCount ++;
	if ( MotorMode & ( 1 << MotOpen  ) ) { MotorPosAbsolutely ++; }
	if ( MotorMode & ( 1 << MotClose ) ) { MotorPosAbsolutely --; }
	MotorRingCountOld = RingCount ;
}
//########################################################################################################################
// Interrupt für Stellrad
ISR(PCINT1_vect) {
	if (!(PINB & 0b00010000)) {	rad_a = 1 ;	} else {	rad_a = 0 ;	}
	if (!(PINB & 0b00100000)) {	rad_b = 1 ;	} else {	rad_b = 0 ;	}
	if ( rad_a == 1 && rad_b == 0 && rotate == 5 ) { rotate = 6 ; }
	if ( rad_a == 1 && rad_b == 1 && rotate == 6 ) { rotate = 7 ; }
	if ( rad_a == 0 && rad_b == 1 && rotate == 7 ) { rotate = 8 ; }
	if ( rad_a == 0 && rad_b == 0 && rotate == 8 ) { rotate = 5 ; Counter1 ++ ; }	// Rechts Drehend
	if ( rad_a == 0 && rad_b == 1 && rotate == 5 ) { rotate = 4 ; }
	if ( rad_a == 1 && rad_b == 1 && rotate == 4 ) { rotate = 3 ; }
	if ( rad_a == 1 && rad_b == 0 && rotate == 3 ) { rotate = 2 ; }
	if ( rad_a == 0 && rad_b == 0 && rotate == 2 ) { rotate = 5 ; Counter1 -- ; }	// Links Drehend
}
//########################################################################################################################

/*
  -- Ethersex META --
  ecmd_feature(motor_open, "motor open", Motor Open)
  ecmd_feature(motor_close, "motor close", Motor Close)
  ecmd_feature(motor_want, "motor want",[value], Display/Set the current motor want stop pos value.)
  ecmd_feature(motor_pos, "motor pos", Motor Pos Absolutely)
*/
